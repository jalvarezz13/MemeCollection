//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MemeCollection
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        private global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace MemeCollection.MemeCollection_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[25];
            _typeNameTable[0] = "MemeCollection.AcercaDePage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "MemeCollection.AjustesPage";
            _typeNameTable[4] = "MemeCollection.memeUserControl";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Int32";
            _typeNameTable[7] = "Windows.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[8] = "MemeCollection.CategoriaComidaPage";
            _typeNameTable[9] = "MemeCollection.CategoriaDeportesPage";
            _typeNameTable[10] = "MemeCollection.CategoriaFamososPage";
            _typeNameTable[11] = "MemeCollection.CategoriaInformaticaPage";
            _typeNameTable[12] = "MemeCollection.CategoriaPeliculasPage";
            _typeNameTable[13] = "MemeCollection.CategoriasPage";
            _typeNameTable[14] = "MemeCollection.CategoriaVideojuegosPage";
            _typeNameTable[15] = "MemeCollection.MainPage";
            _typeNameTable[16] = "MemeCollection.RecientesPage";
            _typeNameTable[17] = "MemeCollection.tiendaUserControl";
            _typeNameTable[18] = "MemeCollection.TiendaCamisetasPage";
            _typeNameTable[19] = "MemeCollection.TiendaCarpetasPage";
            _typeNameTable[20] = "MemeCollection.TiendaFavoritosPage";
            _typeNameTable[21] = "MemeCollection.TiendaGorrasPage";
            _typeNameTable[22] = "MemeCollection.TiendaPage";
            _typeNameTable[23] = "MemeCollection.TiendaSudaderasPage";
            _typeNameTable[24] = "MemeCollection.TiendaTazasPage";

            _typeTable = new global::System.Type[25];
            _typeTable[0] = typeof(global::MemeCollection.AcercaDePage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::MemeCollection.AjustesPage);
            _typeTable[4] = typeof(global::MemeCollection.memeUserControl);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::System.Int32);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[8] = typeof(global::MemeCollection.CategoriaComidaPage);
            _typeTable[9] = typeof(global::MemeCollection.CategoriaDeportesPage);
            _typeTable[10] = typeof(global::MemeCollection.CategoriaFamososPage);
            _typeTable[11] = typeof(global::MemeCollection.CategoriaInformaticaPage);
            _typeTable[12] = typeof(global::MemeCollection.CategoriaPeliculasPage);
            _typeTable[13] = typeof(global::MemeCollection.CategoriasPage);
            _typeTable[14] = typeof(global::MemeCollection.CategoriaVideojuegosPage);
            _typeTable[15] = typeof(global::MemeCollection.MainPage);
            _typeTable[16] = typeof(global::MemeCollection.RecientesPage);
            _typeTable[17] = typeof(global::MemeCollection.tiendaUserControl);
            _typeTable[18] = typeof(global::MemeCollection.TiendaCamisetasPage);
            _typeTable[19] = typeof(global::MemeCollection.TiendaCarpetasPage);
            _typeTable[20] = typeof(global::MemeCollection.TiendaFavoritosPage);
            _typeTable[21] = typeof(global::MemeCollection.TiendaGorrasPage);
            _typeTable[22] = typeof(global::MemeCollection.TiendaPage);
            _typeTable[23] = typeof(global::MemeCollection.TiendaSudaderasPage);
            _typeTable[24] = typeof(global::MemeCollection.TiendaTazasPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AcercaDePage() { return new global::MemeCollection.AcercaDePage(); }
        private object Activate_3_AjustesPage() { return new global::MemeCollection.AjustesPage(); }
        private object Activate_4_memeUserControl() { return new global::MemeCollection.memeUserControl(); }
        private object Activate_8_CategoriaComidaPage() { return new global::MemeCollection.CategoriaComidaPage(); }
        private object Activate_9_CategoriaDeportesPage() { return new global::MemeCollection.CategoriaDeportesPage(); }
        private object Activate_10_CategoriaFamososPage() { return new global::MemeCollection.CategoriaFamososPage(); }
        private object Activate_11_CategoriaInformaticaPage() { return new global::MemeCollection.CategoriaInformaticaPage(); }
        private object Activate_12_CategoriaPeliculasPage() { return new global::MemeCollection.CategoriaPeliculasPage(); }
        private object Activate_13_CategoriasPage() { return new global::MemeCollection.CategoriasPage(); }
        private object Activate_14_CategoriaVideojuegosPage() { return new global::MemeCollection.CategoriaVideojuegosPage(); }
        private object Activate_15_MainPage() { return new global::MemeCollection.MainPage(); }
        private object Activate_16_RecientesPage() { return new global::MemeCollection.RecientesPage(); }
        private object Activate_17_tiendaUserControl() { return new global::MemeCollection.tiendaUserControl(); }
        private object Activate_18_TiendaCamisetasPage() { return new global::MemeCollection.TiendaCamisetasPage(); }
        private object Activate_19_TiendaCarpetasPage() { return new global::MemeCollection.TiendaCarpetasPage(); }
        private object Activate_20_TiendaFavoritosPage() { return new global::MemeCollection.TiendaFavoritosPage(); }
        private object Activate_21_TiendaGorrasPage() { return new global::MemeCollection.TiendaGorrasPage(); }
        private object Activate_22_TiendaPage() { return new global::MemeCollection.TiendaPage(); }
        private object Activate_23_TiendaSudaderasPage() { return new global::MemeCollection.TiendaSudaderasPage(); }
        private object Activate_24_TiendaTazasPage() { return new global::MemeCollection.TiendaTazasPage(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MemeCollection.AcercaDePage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_AcercaDePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  MemeCollection.AjustesPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_AjustesPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  MemeCollection.memeUserControl
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_memeUserControl;
                userType.AddMemberName("titulo");
                userType.AddMemberName("categoria");
                userType.AddMemberName("calificacion");
                userType.AddMemberName("ruta");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  String
                xamlType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Int32
                xamlType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  MemeCollection.CategoriaComidaPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_CategoriaComidaPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  MemeCollection.CategoriaDeportesPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_CategoriaDeportesPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  MemeCollection.CategoriaFamososPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_CategoriaFamososPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  MemeCollection.CategoriaInformaticaPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_CategoriaInformaticaPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  MemeCollection.CategoriaPeliculasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_CategoriaPeliculasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  MemeCollection.CategoriasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_13_CategoriasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  MemeCollection.CategoriaVideojuegosPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_CategoriaVideojuegosPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  MemeCollection.MainPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  MemeCollection.RecientesPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_RecientesPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  MemeCollection.tiendaUserControl
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_tiendaUserControl;
                userType.AddMemberName("titulo");
                userType.AddMemberName("like");
                userType.AddMemberName("precio");
                userType.AddMemberName("ruta");
                userType.AddMemberName("ruta_string");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  MemeCollection.TiendaCamisetasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_TiendaCamisetasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  MemeCollection.TiendaCarpetasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_TiendaCarpetasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  MemeCollection.TiendaFavoritosPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_TiendaFavoritosPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  MemeCollection.TiendaGorrasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_TiendaGorrasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  MemeCollection.TiendaPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_TiendaPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  MemeCollection.TiendaSudaderasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_TiendaSudaderasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  MemeCollection.TiendaTazasPage
                userType = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_TiendaTazasPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_memeUserControl_titulo(object instance)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            return that.titulo;
        }
        private void set_0_memeUserControl_titulo(object instance, object Value)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            that.titulo = (global::System.String)Value;
        }
        private object get_1_memeUserControl_categoria(object instance)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            return that.categoria;
        }
        private void set_1_memeUserControl_categoria(object instance, object Value)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            that.categoria = (global::System.String)Value;
        }
        private object get_2_memeUserControl_calificacion(object instance)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            return that.calificacion;
        }
        private void set_2_memeUserControl_calificacion(object instance, object Value)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            that.calificacion = (global::System.Int32)Value;
        }
        private object get_3_memeUserControl_ruta(object instance)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            return that.ruta;
        }
        private void set_3_memeUserControl_ruta(object instance, object Value)
        {
            var that = (global::MemeCollection.memeUserControl)instance;
            that.ruta = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_4_tiendaUserControl_titulo(object instance)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            return that.titulo;
        }
        private void set_4_tiendaUserControl_titulo(object instance, object Value)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            that.titulo = (global::System.String)Value;
        }
        private object get_5_tiendaUserControl_like(object instance)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            return that.like;
        }
        private void set_5_tiendaUserControl_like(object instance, object Value)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            that.like = (global::System.String)Value;
        }
        private object get_6_tiendaUserControl_precio(object instance)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            return that.precio;
        }
        private void set_6_tiendaUserControl_precio(object instance, object Value)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            that.precio = (global::System.String)Value;
        }
        private void set_7_tiendaUserControl_ruta(object instance, object Value)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            that.ruta = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_8_tiendaUserControl_ruta_string(object instance)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            return that.ruta_string;
        }
        private void set_8_tiendaUserControl_ruta_string(object instance, object Value)
        {
            var that = (global::MemeCollection.tiendaUserControl)instance;
            that.ruta_string = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember xamlMember = null;
            global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MemeCollection.memeUserControl.titulo":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.memeUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "titulo", "String");
                xamlMember.Getter = get_0_memeUserControl_titulo;
                xamlMember.Setter = set_0_memeUserControl_titulo;
                break;
            case "MemeCollection.memeUserControl.categoria":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.memeUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "categoria", "String");
                xamlMember.Getter = get_1_memeUserControl_categoria;
                xamlMember.Setter = set_1_memeUserControl_categoria;
                break;
            case "MemeCollection.memeUserControl.calificacion":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.memeUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "calificacion", "Int32");
                xamlMember.Getter = get_2_memeUserControl_calificacion;
                xamlMember.Setter = set_2_memeUserControl_calificacion;
                break;
            case "MemeCollection.memeUserControl.ruta":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.memeUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "ruta", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_3_memeUserControl_ruta;
                xamlMember.Setter = set_3_memeUserControl_ruta;
                break;
            case "MemeCollection.tiendaUserControl.titulo":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.tiendaUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "titulo", "String");
                xamlMember.Getter = get_4_tiendaUserControl_titulo;
                xamlMember.Setter = set_4_tiendaUserControl_titulo;
                break;
            case "MemeCollection.tiendaUserControl.like":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.tiendaUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "like", "String");
                xamlMember.Getter = get_5_tiendaUserControl_like;
                xamlMember.Setter = set_5_tiendaUserControl_like;
                break;
            case "MemeCollection.tiendaUserControl.precio":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.tiendaUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "precio", "String");
                xamlMember.Getter = get_6_tiendaUserControl_precio;
                xamlMember.Setter = set_6_tiendaUserControl_precio;
                break;
            case "MemeCollection.tiendaUserControl.ruta":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.tiendaUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "ruta", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Setter = set_7_tiendaUserControl_ruta;
                break;
            case "MemeCollection.tiendaUserControl.ruta_string":
                userType = (global::MemeCollection.MemeCollection_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MemeCollection.tiendaUserControl");
                xamlMember = new global::MemeCollection.MemeCollection_XamlTypeInfo.XamlMember(this, "ruta_string", "String");
                xamlMember.Getter = get_8_tiendaUserControl_ruta_string;
                xamlMember.Setter = set_8_tiendaUserControl_ruta_string;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MemeCollection.MemeCollection_XamlTypeInfo.XamlSystemBaseType
        , global::Windows.UI.Xaml.Markup.IXamlType2
    {
        global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;
        global::Windows.UI.Xaml.Markup.IXamlType _boxedType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        public global::Windows.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Windows.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MemeCollection.MemeCollection_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

